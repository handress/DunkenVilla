<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_goblinFuerte_stand_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_Interactivo</parentName>
  <maskName>spr_mascGoblin</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///VARIABLES

event_inherited();

enum eg2{
    
    parado = Goblin_Fuerte_Parado,
    corriendo = Goblin_Fuerte_Corriendo,
    atacando = Goblin_Fuerte_Atacando,
    muriendo = Goblin_Fuerte_Muriendo
}

dir = "abajo"; // direccion donde miramos
estado = eg2.parado;

vida = 6;
radio_vision = 150;
radio_ataque = 36;
crear_ataque = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Iniciar
depth = -y;
vv = 0;
vh = 0;
v = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Generar movimiento dependiendo del jugador

// Le seguimos
if (distance_to_point(obj_Prota.x,obj_Prota.y) &lt; radio_vision){
     vh = sign(obj_Prota.x-x) * v;
     vv = sign(obj_Prota.y-y) * v;
} else {
    // Si esta muy lejos volvemos al inicio
     vh = sign(xstart-x) * v;
     vv = sign(ystart-y) * v;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gestión de estado de movimiento, dirección y muerte


// Determinamos direccion
if (vv &gt; 0) dir = "abajo";
else if (vv &lt; 0) dir = "arriba";
else if (vh &gt; 0) dir = "derecha";
else if (vh &lt; 0) dir = "izquierda";

// Si estamos atacando comprovamos estado parado y caminar
if(estado != eg2.atacando){
    if(dir != ""){
        estado = eg2.corriendo;
    }
    if(vh== 0 and vv ==0){
        estado = eg.parado;
    }
}else{// Determinamos que si ataca se para
    vh = 0;
    vv = 0;
    //Arreglar la direccion solo si atacamos
    grados = point_direction(x,y,obj_Prota.x,obj_Prota.y);
    if(grados &gt;= 45 and grados&lt; 135){
        dir = "arriba";
    }else if (grados &lt;45 or grados &gt; 315 ){
        dir = "derecha";
    }else if(grados &gt;= 135 and grados &lt;225){
        dir = "izquierda";
    }else if(grados &gt;= 225 and grados &lt;=315){
        dir = "abajo";
    }
    
}

//Genera un corazon
if(colision == true and vida&lt;=0){
    scr_Generar_Corazon(25);
}

if(vida == 0){
    estado = eg2.muriendo;
    colision = false;
    vh = 0;
    vv = 0;
}
 

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gestion de ataques

if(distance_to_point(obj_Prota.x,obj_Prota.y) &lt; radio_ataque and estado != eg2.atacando and estado != eg2.muriendo){
    //Atacar si no estamos tacando y reiniciar animacion
    
    estado = eg2.atacando;
    image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gestión de colisiones contra paredes y objetos interactivos
if (instance_place(x+vh,y,obj_Pared_16)) { vh = 0; }
if (instance_place(x,y+vv,obj_Pared_16)) { vv = 0; }

// Colision horizontal de objeto interactivo sólo si está habilitada
interactivo = instance_place(x+vh,y,obj_Interactivo);
if (interactivo) { if (interactivo.colision) vh = 0; }

// Colision vertical de objeto interactivo sólo si está habilitada
interactivo = instance_place(x,y+vv,obj_Interactivo);
if (interactivo) { if (interactivo.colision) vv = 0; }


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Establecer movimiento final y estado
x += vh;
y += vv;

script_execute(estado);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
